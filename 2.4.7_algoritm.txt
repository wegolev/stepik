Алгоритм:

Строим матрицу, в которой строкам соответствуют очищенные от знаков препинания тексты (= документы) из коллекции (корпуса), столбцы - это уникальные токены = словарь.

Документы (= коллекция = корпус):

Казнить нельзя помиловать Нельзя наказывать (длина документа = 5)
Казнить нельзя помиловать Нельзя освободить (длина документа = 5)
Нельзя не помиловать (длина документа = 3)
Обязательно освободить (длина документа = 2)
Размер коллекции в данном случае = 4.

Словарь в порядке возрастания частоты:

наказывать не обязательно казнить освободить нельзя помиловать

Рассмотрим алгоритм на примере слова "помиловать".

2. Считаем для каждой строки частоту слова из словаря в этом документе.

1 документ - 1,

2 документ - 1,

3 документ - 1,

4 документ - 0 (не встречается).

3. Считаем TF = частота слова в документе / длина документа

1 документ - 1/5=0.2,

2 документ - 1/5=0.2,

3 документ - 1/3=0.33,

4 документ - 0.

4. Считаем IDF (inverse document frequency) — обратная частота слова в документах (размер коллекции делим на количество документов, в которых слово употребляется).

1 документ - 4/3=1.33,

2 документ - 4/3=1.33,

3 документ - 4/3=1.33,

4 документ - 0.

5. Вычисляем взвешивание lTFIDF = ln(TF+1)⋅IDF

1 документ - ln(0,2+1)⋅1.33 = 0.2425,

2 документ - ln(0,2+1)⋅1.33 = 0.2425,

3 документ - ln(0,33+1)⋅1.33 = 0.3824,

4 документ - ln(0+1)⋅0 = 0.

6. Находим среднее значение (0.2425 + 0.2425 + 0.3824 + 0)/4 = 0.21685

7. Находим среднеквадратичное отклонение по указанной в задании формуле

std = sqrt(((0.2425 - 0.21685)^2 + (0.2425 - 0.21685)^2 + (0.3824 - 0.21685)^2 + (0 - 0.21685)^2))/3) = 0.16

8. Масштабируем признаки -

вычитаем от lTFIDF (см. п. 5) среднее и делим на среднеквадратичное:

(0.2425 - 0.21685)/0.16 = 0.16

(0.2425 - 0.21685)/0.16 = 0.16

(0.3824 - 0.21685)/0.16 = 1.04

(0 - 0.21685)/0.16 = - 1.36